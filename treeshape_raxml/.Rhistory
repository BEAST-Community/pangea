library(ape)
library(treeImbalance)
library(magrittr)
set.seed(1)
setwd("~/Dropbox/ebola")
tree <- read.nexus("2014_SL.HKY_strict.exp.trees.mcc")
tree$edge.length[tree$edge.length<0] <- 0.0
tree.snt <- snt(tree)
install_git("http://github.com/bdearlove/treeImbalance.git")
library(devtools)
install_git("http://github.com/bdearlove/treeImbalance.git")
library(treeImbalance)
tree.snt <- snt(tree)
tree.s <- tail(tree.snt[[2]],1)
tree.ct <- ct(tree)
tree.c <- tail(tree.ct[[2]],1)
nsims <- 1000
sntlist <- list()
ctlist <- list()
for(i in 1:nsims){
simtree <- getSimTree(tree)
sntlist[[i]] <- snt(simtree)
ctlist[[i]] <- ct(simtree)
}
globalSackin <- function(sntlist){
lapply(sntlist,"[[",2) %>% lapply(.,tail,1) %>% unlist
}
globalCherries <- function(ctlist){
lapply(ctlist,"[[",2) %>% lapply(.,tail,1) %>% unlist
}
x <- globalCherries(ctlist)
y <- globalSackin(sntlist)
kde2d(x,y)
library(MASS)
kde2d(x,y)
k <- kde2d(x,y)
plot(k)
plot(x,y)
points(tree.c,tree.s,pch=16,col="red")
library(surveillance)
install.packages("surveillance",repos="http://r-forge.r-project.org")
install.packages("surveillance",repos="http://r-forge.r-project.org",type="source")
library(ape)
library(magrittr)
library(ggplot2)
library(treeImbalance)
list.files("../raxmltrees","bestTree")
setwd("~/Projects/pangea/treeshape2")
list.files("../raxmltrees","bestTree")
?list.files
trees.fn <- list.files("../raxmltrees","bestTree",full.names=TRUE)
trees.fn
trees.fn <- list.files("../raxmltrees","bestTree",full.names=TRUE)
numtrees <- length(trees.fn)
raxmltrees <- list()
for(i in 1:numtrees){
raxmltrees[[i]] <- read.tree(trees.fn[i])
}
i <- 1
tr <- raxmltrees[[i]]
tr
tr$tip.label %>% strsplit(.,"\\||\\_")
td <- tr$tip.label %>% strsplit(.,"\\||\\_") %>% lapply(.,tail,1) %>% unlist %>% as.double
td
i=4
tr <- raxmltrees[[i]]
td <- tr$tip.label %>% strsplit(.,"\\||\\_") %>% lapply(.,tail,1) %>% unlist %>% as.double
td
?rtt
trees <- list()
for(i in 1:numtrees){
tr <- raxmltrees[[i]]
td <- tr$tip.label %>% strsplit(.,"\\||\\_") %>% lapply(.,tail,1) %>% unlist %>% as.double
tr2 <- rtt(tr,td,objective="rsquared")
trees[[i]] <- tr2
}
plot(trees[[1]])
dev.off()
globalstat <- function(s){
tail(s[[2]],1)
}
nsims <- 100
s.vec <- rep(0,numtrees)
ch.vec <- rep(0,numtrees)
snull.list <- list()
chnull.list <- list()
for(i in 1:numtrees){
print(paste(i,"/",numtrees))
tr <- trees[[i]]
s <- snt(tr)
ch <- ct(tr)
tr.s <- globalstat(s)
tr.ch <- globalstat(ch)
s.vec[i] <- tr.s
ch.vec[i] <- tr.ch
snull <- rep(0,nsims)
chnull <- rep(0,nsims)
for(j in 1:nsims){
trp <- getSimTree(tr)
sp <- snt(trp)
chp <- ct(trp)
snull[j] <- globalstat(sp)
chnull[j] <- globalstat(chp)
}
snull.list[[i]] <- snull
chnull.list[[i]] <- chnull
}
svg("sackins_raxmlrtt.svg",width=9,height=15)
par(mfrow=c(5,3))
for(i in 1:15){
alls <- c(snull.list[[i]],s.vec[i])
hist(snull.list[[i]],breaks=100,xlim=c(min(alls),max(alls)),main=stubs[i],xlab="Sackin's index")
abline(v=s.vec[i],col="red")
}
trees.fn
stubs <- trees.fn %>% strsplit(.,"/") %>% lapply(.,tail,1) %>% unlist
stubs
stubs <- trees.fn %>% strsplit(.,"/|\\.") %>% lapply(.,tail,1) %>% unlist
stubs
svg("sackins_raxmlrtt.svg",width=9,height=15)
par(mfrow=c(5,3))
for(i in 1:15){
alls <- c(snull.list[[i]],s.vec[i])
hist(snull.list[[i]],breaks=100,xlim=c(min(alls),max(alls)),main=stubs[i],xlab="Sackin's index")
abline(v=s.vec[i],col="red")
}
svg("sackins_raxmlrtt.svg",width=9,height=15)
par(mfrow=c(5,3))
for(i in 1:numtrees){
alls <- c(snull.list[[i]],s.vec[i])
hist(snull.list[[i]],breaks=100,xlim=c(min(alls),max(alls)),main=stubs[i],xlab="Sackin's index")
abline(v=s.vec[i],col="red")
}
dev.off()
trees.fn
source('~/.active-rstudio-document', echo=TRUE)
sackins.p <- seq(1,15) %>% s.vec[.] >= snull.list[[.]]
sackins.p[i] <- (s.vec[i]>=snull.list[[i]])/nsims
sackins.p <- rep(-1,15)
for(i in 1:15){
sackins.p[i] <- (s.vec[i]>=snull.list[[i]])/nsims
}
warnings()
svec[1]
s.vec[1]
snull.list[[1]]
i=1
s.vec[i]>=snull.list[[i]]
sackins.p <- rep(-1,15)
for(i in 1:15){
sackins.p[i] <- sum(as.integer(s.vec[i]>=snull.list[[i]]))/nsims
}
sackins.p
sackins.p <- rep(-1,15)
for(i in 1:15){
sackins.p[i] <- sum(as.integer(snull.list[[i]])>=s.vec[i])/nsims
}
sackins.p
sackins.p <- rep(-1,15)
cherries.p <- rep(-1,15)
for(i in 1:15){
sackins.p[i] <- sum(as.integer(snull.list[[i]])>=s.vec[i])/nsims
cherries.p[i] <- sum(as.integer(chnull.list[[i]])<=ch.vec[i])/nsims
}
data.frame(Scenario=stubs,Sackins.p=sackins.p,Cherries.p=cherries.p)
install.packages("SortableHTMLTables")
library(SortableHTMLTables)
sortable.html.table(pval.df,"pvalues.html")
pval.df <- data.frame(Scenario=stubs,Sackins.p=sackins.p,Cherries.p=cherries.p)
sortable.html.table(pval.df,"pvalues.html")
save.image("~/Projects/pangea/treeshape2/asymmetry2.RData")
